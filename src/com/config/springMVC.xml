<?xml version="1.0" encoding="UTF-8"?>
<p:beans
        xmlns:p="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.2.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd "
>
    <!-- 提供对<bean/>中的属性值进行外在化管理。开发者可以提供单独的属性文件来管理相关属性。 -->
    <context:property-placeholder location="classpath:com/config/db.properties"/>
    <!--在xml配置了这个标签后，spring可以自动去扫描base-pack下面或者子包下面的java文件，如果扫描到有@Component @Controller @Service等这些注解的类，
        则把这些类注册为bean如果配置了<context:component-scan>那么<context:annotation-com.config/>
        标签就可以不用再xml中配置了，因为前者包含了后者。-->
    <!-- 可以扫描controller、service、...这里让扫描controller，指定controller的包-->
    <context:component-scan base-package="com.controller"/>
    <context:component-scan base-package="com.controller.converter"/>
    <context:component-scan base-package="com.services"/>
    <context:component-scan base-package="com.config"/>

    <!-- 配置数据源 -->
    <!--    <p:bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">-->
    <p:bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <p:property name="username" value="${jdbc.username}"/>
        <p:property name="password" value="${jdbc.password}"/>
        <p:property name="url" value="${jdbc.url}"/>
        <p:property name="driverClassName" value="${jdbc.driver}"/>
    </p:bean>
    <!-- 配置事务管理器-->
    <p:bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <p:property name="dataSource" ref="dataSource"/>
    </p:bean>
    <!-- 开启注解事务 -->
    <tx:annotation-driven transaction-manager="txManager"/>
    <!-- 配置sqlSessionFactory -->
    <p:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <p:property name="dataSource" ref="dataSource"/>
        <p:property name="configLocation" value="classpath:com/config/SqlMapConfig.xml"/>
    </p:bean>
    <!-- 配置mapper扫描-->
    <p:bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <p:property name="basePackage" value="com.mapper"/>
        <p:property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </p:bean>

    <p:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 配置jsp路径的前缀 -->
        <p:property name="prefix" value="/"/>
        <!-- 配置jsp路径的后缀 -->
        <p:property name="suffix" value=".jsp"/>
    </p:bean>

    <!-- 自定义参数绑定 -->
    <p:bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <!-- 转换器 -->
        <p:property name="converters">
            <p:list>
                <!-- 日期类型转换 -->
                <p:bean class="com.controller.converter.DateConverter"/>
            </p:list>
        </p:property>
    </p:bean>

    <!-- 拦截器 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <p:bean class="com.interceptor.loginInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--    &lt;!&ndash; 校验器 &ndash;&gt;-->
    <!--    <p:bean id="validator"-->
    <!--            class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">-->
    <!--        &lt;!&ndash; hibernate校验器&ndash;&gt;-->
    <!--        <p:property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>-->
    <!--        &lt;!&ndash; 指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下的ValidationMessages.properties &ndash;&gt;-->
    <!--        <p:property name="validationMessageSource" ref="messageSource"/>-->
    <!--    </p:bean>-->
    <!--    &lt;!&ndash; 校验错误信息配置文件 &ndash;&gt;-->
    <!--    <p:bean id="messageSource"-->
    <!--            class="org.springframework.context.support.ReloadableResourceBundleMessageSource">-->
    <!--        &lt;!&ndash; 资源文件名&ndash;&gt;-->
    <!--        <p:property name="basenames">-->
    <!--            <p:list>-->
    <!--                <p:value>classpath:com.config.ValidationMessages</p:value>-->
    <!--            </p:list>-->
    <!--        </p:property>-->
    <!--        &lt;!&ndash; 资源文件编码格式 &ndash;&gt;-->
    <!--        <p:property name="fileEncodings" value="utf-8"/>-->
    <!--        &lt;!&ndash; 对资源文件内容缓存时间，单位秒 &ndash;&gt;-->
    <!--        <p:property name="cacheSeconds" value="120"/>-->
    <!--    </p:bean>-->

    <!-- 文件上传 -->
    <p:bean id="multipartResolver"
            class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 设置上传文件的最大尺寸为5MB -->
        <p:property name="maxUploadSize" value="5242880"/>
    </p:bean>

    <mvc:annotation-driven>
        <mvc:message-converters>
            <p:bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <p:constructor-arg value="UTF-8"/>
            </p:bean>
            <p:bean class="org.springframework.http.converter.ResourceHttpMessageConverter"/>
            <p:bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!--    <mvc:annotation-driven conversion-service="conversionService" validator="validator"/>-->
</p:beans>
